// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LBAnimate
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import LBAnimate
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension LBAnimate.UIView_LBAnimate.Balloon {
  @discardableResult
  public func width(_ newValue: Swift.Double) -> Self
}
extension LBAnimate.UIView_LBAnimate.Balloon {
  @discardableResult
  public func height(_ newValue: Swift.Double) -> Self
}
extension LBAnimate.UIView_LBAnimate.Balloon {
  @discardableResult
  public func didStop(_ block: @escaping () -> Swift.Void) -> Self
}
extension LBAnimate.UIView_LBAnimate.Balloon {
  @discardableResult
  public func didStart(_ block: @escaping () -> Swift.Void) -> Self
}
extension LBAnimate.UIView_LBAnimate.Balloon {
  @discardableResult
  public func didTouch(_ block: @escaping () -> Swift.Void) -> Self
}
extension LBAnimate.UIView_LBAnimate {
  @_inheritsConvenienceInitializers public class Balloons : LBAnimate.LBAnimate_Objc_Tap_Gesture_Style, LBAnimate.LBDelayProtocol {
    public init(_ parent: LBAnimate.UIView_LBAnimate?, _ target: UIKit.UIView? = nil)
    override public func didTapped(_ sender: UIKit.UITapGestureRecognizer)
    public func attach(_ image: UIKit.UIImage?)
    public func detach()
    @objc deinit
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LBAnimate_Objc_Tap_Gesture_Style : LBAnimate.LBAnimate_Objc_Foundation {
  open func add()
  open func remove()
  open func didTapped(_ sender: UIKit.UITapGestureRecognizer)
  @discardableResult
  public func numberOfTaps(_ newValue: Swift.Int) -> Self
  @discardableResult
  public func requireToFail(_ newValue: UIKit.UIGestureRecognizer) -> Self
  @objc deinit
}
public protocol LBDelayProtocol : LBAnimate.LBAnimate_Objc_Foundation {
}
extension LBAnimate.LBDelayProtocol {
  @discardableResult
  public func delay(_ newValue: CoreFoundation.CGFloat) -> Self
}
extension LBAnimate.UIView_LBAnimate.Press {
  @discardableResult
  public func minScaleY(_ newValue: CoreFoundation.CGFloat) -> Self
}
extension LBAnimate.UIView_LBAnimate.Press {
  @discardableResult
  public func minScaleX(_ newValue: CoreFoundation.CGFloat) -> Self
}
extension LBAnimate.UIView_LBAnimate.Press {
  @discardableResult
  public func endPress(_ block: @escaping () -> Swift.Void) -> Self
}
extension LBAnimate.UIView_LBAnimate.Press {
  @discardableResult
  public func beganPress(_ block: @escaping () -> Swift.Void) -> Self
}
public protocol LBDampingProtocol : LBAnimate.LBAnimate_Objc_Foundation {
}
extension LBAnimate.LBDampingProtocol {
  @discardableResult
  public func damping(_ newValue: CoreFoundation.CGFloat) -> Self
}
public protocol LBRepeatProtocol : LBAnimate.LBAnimate_Objc_Foundation {
}
extension LBAnimate.LBRepeatProtocol {
  @discardableResult
  public func repeatCount(_ newValue: Swift.Int?) -> Self
}
@_hasMissingDesignatedInitializers public class LBAnimate_Objc_Foundation {
  @objc deinit
}
extension LBAnimate.UIView_LBAnimate.Balloons {
  @discardableResult
  public func numberOfBalloons(_ newValue: Swift.Int) -> Self
}
extension LBAnimate.UIView_LBAnimate.Balloons {
  @discardableResult
  public func minScale(_ newValue: CoreFoundation.CGFloat) -> Self
}
extension LBAnimate.UIView_LBAnimate.Balloons {
  @discardableResult
  public func maxScale(_ newValue: CoreFoundation.CGFloat) -> Self
}
extension LBAnimate.UIView_LBAnimate.Balloons {
  @discardableResult
  public func velocity(_ newValue: CoreFoundation.CGFloat) -> Self
}
extension LBAnimate.UIView_LBAnimate.Balloons {
  @discardableResult
  public func didStop(_ block: @escaping () -> Swift.Void) -> Self
}
extension LBAnimate.UIView_LBAnimate.Balloons {
  @discardableResult
  public func didStart(_ block: @escaping () -> Swift.Void) -> Self
}
extension LBAnimate.UIView_LBAnimate.Balloons {
  @discardableResult
  public func didTouch(_ block: @escaping () -> Swift.Void) -> Self
}
extension LBAnimate.UIView_LBAnimate {
  @_inheritsConvenienceInitializers public class Firework : LBAnimate.LBAnimate_Objc_Tap_Gesture_Style, LBAnimate.LBDelayProtocol, LBAnimate.LBDurationProtocol {
    public init(_ parent: LBAnimate.UIView_LBAnimate?, _ target: UIKit.UIView? = nil)
    override public func didTapped(_ sender: UIKit.UITapGestureRecognizer)
    public func attach(_ images: [UIKit.UIImage?])
    public func detach()
    @objc deinit
  }
}
extension LBAnimate.UIView_LBAnimate.Position {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Center : LBAnimate.LBAnimate_Objc_Foundation {
    public var x: LBAnimate.UIView_LBAnimate.Position.X {
      get
    }
    public var y: LBAnimate.UIView_LBAnimate.Position.Y {
      get
    }
    @objc deinit
  }
}
public protocol LBVelocityProtocol : LBAnimate.LBAnimate_Objc_Foundation {
}
extension LBAnimate.LBVelocityProtocol {
  @discardableResult
  public func velocity(_ newValue: CoreFoundation.CGFloat) -> Self
}
extension LBAnimate.UIView_LBAnimate {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Position : LBAnimate.LBAnimate_Objc_Foundation {
    public var minX: LBAnimate.UIView_LBAnimate.Position.X {
      get
    }
    public var minY: LBAnimate.UIView_LBAnimate.Position.Y {
      get
    }
    public var maxX: LBAnimate.UIView_LBAnimate.Position.X {
      get
    }
    public var maxY: LBAnimate.UIView_LBAnimate.Position.Y {
      get
    }
    public var center: LBAnimate.UIView_LBAnimate.Position.Center {
      get
      set
    }
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class UIView_LBAnimate {
  public var press: LBAnimate.UIView_LBAnimate.Press? {
    get
    set
  }
  public var balloon: LBAnimate.UIView_LBAnimate.Balloon? {
    get
    set
  }
  public var breathe: LBAnimate.UIView_LBAnimate.Breathe? {
    get
    set
  }
  public var position: LBAnimate.UIView_LBAnimate.Position? {
    get
    set
  }
  public var balloons: LBAnimate.UIView_LBAnimate.Balloons? {
    get
    set
  }
  public var firework: LBAnimate.UIView_LBAnimate.Firework? {
    get
    set
  }
  public var soapBubbles: LBAnimate.UIView_LBAnimate.SoapBubbles? {
    get
    set
  }
  @objc deinit
}
extension LBAnimate.UIView_LBAnimate.Position {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class X : LBAnimate.LBAnimate_Objc_Position_Axis_Style {
    override public func change(to axisPoint: CoreFoundation.CGFloat, completion: (() -> Swift.Void)? = nil)
    @objc deinit
  }
}
extension LBAnimate.UIView_LBAnimate.Firework {
  @discardableResult
  public func didStop(_ block: @escaping () -> Swift.Void) -> Self
}
extension LBAnimate.UIView_LBAnimate.Firework {
  @discardableResult
  public func didStart(_ block: @escaping () -> Swift.Void) -> Self
}
extension LBAnimate.UIView_LBAnimate.Firework {
  @discardableResult
  public func didTouch(_ block: @escaping () -> Swift.Void) -> Self
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LBAnimate_Objc_Position_Axis_Style : LBAnimate.LBAnimate_Objc_Foundation, LBAnimate.LBDelayProtocol, LBAnimate.LBDampingProtocol, LBAnimate.LBDurationProtocol, LBAnimate.LBVelocityProtocol {
  convenience public init(_ point: LBAnimate.LBAnimate_Objc_Position_Axis_Style.Point, _ parent: LBAnimate.UIView_LBAnimate?, _ target: UIKit.UIView? = nil)
  public func change(to axisPoint: CoreFoundation.CGFloat, completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
extension LBAnimate.LBAnimate_Objc_Position_Axis_Style {
  public enum Point {
    case none
    case maxY
    case maxX
    case minY
    case minX
    case centerX
    case centerY
    public static func == (a: LBAnimate.LBAnimate_Objc_Position_Axis_Style.Point, b: LBAnimate.LBAnimate_Objc_Position_Axis_Style.Point) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension LBAnimate.UIView_LBAnimate {
  @_inheritsConvenienceInitializers public class Press : LBAnimate.LBAnimate_Objc_Long_Press_Gesture_Style, LBAnimate.LBDelayProtocol, LBAnimate.LBDurationProtocol {
    public init(_ parent: LBAnimate.UIView_LBAnimate?, _ target: UIKit.UIView? = nil)
    override public func began(_ sender: UIKit.UILongPressGestureRecognizer)
    override public func ended(_ sender: UIKit.UILongPressGestureRecognizer)
    override public func cancelled(_ sender: UIKit.UILongPressGestureRecognizer)
    public func attach()
    public func detach()
    @objc deinit
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LBAnimate_Objc_Long_Press_Gesture_Style : LBAnimate.LBAnimate_Objc_Foundation {
  open func add()
  open func remove()
  open func ended(_ sender: UIKit.UILongPressGestureRecognizer)
  open func began(_ sender: UIKit.UILongPressGestureRecognizer)
  open func cancelled(_ sender: UIKit.UILongPressGestureRecognizer)
  open func didTapped(_ sender: UIKit.UILongPressGestureRecognizer)
  @objc deinit
}
public protocol LBDurationProtocol : LBAnimate.LBAnimate_Objc_Foundation {
}
extension LBAnimate.LBDurationProtocol {
  @discardableResult
  public func duration(_ newValue: CoreFoundation.CGFloat) -> Self
}
extension LBAnimate.UIView_LBAnimate.SoapBubbles {
  @discardableResult
  public func numberOfBubbles(_ newValue: Swift.Int) -> Self
}
extension LBAnimate.UIView_LBAnimate.SoapBubbles {
  @discardableResult
  public func scale(_ newValue: CoreFoundation.CGFloat) -> Self
}
extension LBAnimate.UIView_LBAnimate.SoapBubbles {
  @discardableResult
  public func velocity(_ newValue: CoreFoundation.CGFloat) -> Self
}
extension LBAnimate.UIView_LBAnimate.SoapBubbles {
  @discardableResult
  public func didStop(_ block: @escaping () -> Swift.Void) -> Self
}
extension LBAnimate.UIView_LBAnimate.SoapBubbles {
  @discardableResult
  public func didStart(_ block: @escaping () -> Swift.Void) -> Self
}
extension LBAnimate.UIView_LBAnimate.SoapBubbles {
  @discardableResult
  public func didTouch(_ block: @escaping () -> Swift.Void) -> Self
}
extension LBAnimate.UIView_LBAnimate {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Balloon : LBAnimate.LBAnimate_Objc_Tap_Gesture_Style, LBAnimate.LBDelayProtocol, LBAnimate.LBDurationProtocol {
    override public func didTapped(_ sender: UIKit.UITapGestureRecognizer)
    public func attach(_ image: UIKit.UIImage?)
    public func detach()
    @objc deinit
  }
}
extension LBAnimate.UIView_LBAnimate {
  @_inheritsConvenienceInitializers public class SoapBubbles : LBAnimate.LBAnimate_Objc_Tap_Gesture_Style, LBAnimate.LBDelayProtocol, LBAnimate.LBDurationProtocol {
    public init(_ parent: LBAnimate.UIView_LBAnimate?, _ target: UIKit.UIView? = nil)
    override public func didTapped(_ sender: UIKit.UITapGestureRecognizer)
    public func attach(_ image: UIKit.UIImage?)
    public func detach()
    @objc deinit
  }
}
extension LBAnimate.UIView_LBAnimate.Breathe {
  @discardableResult
  public func minScaleY(_ newValue: CoreFoundation.CGFloat) -> Self
}
extension LBAnimate.UIView_LBAnimate.Breathe {
  @discardableResult
  public func minScaleX(_ newValue: CoreFoundation.CGFloat) -> Self
}
extension LBAnimate.UIView_LBAnimate.Breathe {
  @discardableResult
  public func maxScaleY(_ newValue: CoreFoundation.CGFloat) -> Self
}
extension LBAnimate.UIView_LBAnimate.Breathe {
  @discardableResult
  public func maxScaleX(_ newValue: CoreFoundation.CGFloat) -> Self
}
extension LBAnimate.UIView_LBAnimate.Position {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Y : LBAnimate.LBAnimate_Objc_Position_Axis_Style {
    override public func change(to axisPoint: CoreFoundation.CGFloat, completion: (() -> Swift.Void)? = nil)
    @objc deinit
  }
}
extension LBAnimate.UIView_LBAnimate {
  @_inheritsConvenienceInitializers public class Breathe : LBAnimate.LBAnimate_Objc_Foundation, LBAnimate.LBRepeatProtocol, LBAnimate.LBDelayProtocol, LBAnimate.LBDurationProtocol {
    public init(_ parent: LBAnimate.UIView_LBAnimate?, _ target: UIKit.UIView? = nil)
    public func stop()
    public func start()
    @objc deinit
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var lb_animate: LBAnimate.UIView_LBAnimate? {
    get
  }
}
extension LBAnimate.LBAnimate_Objc_Position_Axis_Style.Point : Swift.Equatable {}
extension LBAnimate.LBAnimate_Objc_Position_Axis_Style.Point : Swift.Hashable {}
